version: 0.2

phases:
  pre_build:
    commands:
      - echo "Logging in to Amazon ECR..."
      - aws ecr get-login-password --region $awsRegion | docker login --username AWS --password-stdin $awsAccountID.dkr.ecr.$awsRegion.amazonaws.com
  build:
    commands:
      - echo "Building the Docker image..."
      - docker build -t $dockerContainerName:latest .
      - docker tag $dockerContainerName:latest $awsAccountID.dkr.ecr.$awsRegion.amazonaws.com/$dockerContainerName:latest
  post_build:
    commands:
      - echo "Pushing container to ECR..."
      - docker push $awsAccountID.dkr.ecr.$awsRegion.amazonaws.com/$dockerContainerName:latest
      - echo "Creating new Lambda version..."
      - aws lambda update-function-code --region $awsRegion --function-name $dockerContainerName --image-uri $awsAccountID.dkr.ecr.$awsRegion.amazonaws.com/$dockerContainerName:latest
      - sleep 20
      - aws lambda publish-version --function-name $dockerContainerName
      - echo "Deploying new Lambda function version"
      - CURR_VERSION=$(aws lambda get-function --function-name $dockerContainerName:latest | jq -r .Configuration.Version)
      - NEXT_VERSION=$((CURR_VERSION + 1))
      - 'aws deploy create-deployment --application-name $dockerContainerName-deploy --deployment-config-name CodeDeployDefault.LambdaAllAtOnce --deployment-group-name $dockerContainerName-deploy-group --region $awsRegion --revision ''{"revisionType": "AppSpecContent", "appSpecContent": {"content": "{version: 0, Resources: [{myLambdaFunction: {Type: ''AWS::Lambda::Function'', Properties: {Name: ''$dockerContainerName'', CurrentVersion: ''$CURR_VERSION'', TargetVersion: ''$NEXT_VERSION'', Alias: latest}}}]}"}}'''
